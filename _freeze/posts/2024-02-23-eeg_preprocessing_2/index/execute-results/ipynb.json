{
  "hash": "41a3cec4162cee8abee078b1b4edfcdf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"EEG preprocessing II: eye-artifacts, repairing and rejecting\"\ndescription: \"The second part of this series demonstrate additional preprocessing steps. Specifically, it addresses the problem of eye artifacts which are omnipresent in EEG recordings. It also demonstartes a procedure for repairing and rejecting noise-contaminated channels and segments. \"\ndate: \"2024-02-23\"\nimage: featured.png\nimage-alt: |\n  `matplotlib` plot of an event-related potential\naliases:\n  - /post/eeg-preprocessing-2/index.html\n  - /post/eeg-preprocessing-2.html\nengine: Jupyter\nformat:\n  html: default\n  ipynb: default\nfreeze: auto\n---\n\nThe [previous post on preprocessing EEG](posts/eeg_preprocessing) presented a minimally invasive pipeline of procedures that are necessary in most EEG analyses.  In this post I present additional steps that might be useful if the data is still not **sufficiently cleaned**. First, I will address **eye blinks** which is one of the most prevalent sources of artifacts in EEG recordings. After that, I'll demonstrate a method to repair or remove segments of the data **contaminated with noise**. \n\n# Prerequisites\n\nFirst, we need to install some packages that provide us with the equired preprocessing functions:\n```\npip install mne meegkit pyprep autoreject\n```\nThen, we have to dowload the sample data from MNE Python and clean it using the steps described [in the previous post on EEG preprocessing](posts/eeg_preprocessing).\nThe code below does exactly that --- if you want a more detailed explanation, read the original post.\nRunning the cell below produces the cleaned `epochs` to which we will apply further preprocessing, starting with the removal of **eye artifacts**.\n\n::: {#2207b19b .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nfrom mne.io import read_raw_fif\nfrom mne.datasets.sample import data_path\nfrom mne import find_events\nfrom mne.epochs import Epochs\nfrom meegkit.detrend import detrend\nfrom meegkit.dss import dss_line\nfrom pyprep.ransac import find_bad_by_ransac\n\nraw = read_raw_fif(data_path() / \"MEG/sample/sample_audvis_raw.fif\")\nevents = find_events(raw)\nraw.pick(picks=\"eeg\")\nraw, events = raw.resample(150, events=events)\nX = raw.get_data().T  # transpose so the data is organized time-by-channels\nX, _, _ = detrend(X, order=1)\nX, _, _ = detrend(X, order=6)\nraw._data = X.T  # overwrite raw data\nX, noise = dss_line(X, fline=60, sfreq=raw.info[\"sfreq\"], nremove=3)\nraw._data = X.T\nbads, _ = find_bad_by_ransac(\n    data=raw.get_data(),\n    sample_rate=raw.info[\"sfreq\"],\n    complete_chn_labs=np.asarray(raw.info[\"ch_names\"]),\n    chn_pos=np.stack([ch[\"loc\"][0:3] for ch in raw.info[\"chs\"]]),\n    exclude=[],\n    corr_thresh=0.9,\n)\nraw_clean = raw.copy()\nraw_clean.info[\"bads\"] = bads\nraw_clean.interpolate_bads()\nraw_clean.set_eeg_reference(\"average\", projection=True)  # compute the reference\nraw.add_proj(raw_clean.info[\"projs\"][0])\ndel raw_clean  # delete the copy\nraw.apply_proj()  # apply the reference\nevent_id = {\"auditory/left\": 1, \"auditory/right\": 2}\nepochs = Epochs(raw, events, event_id, tmin=-0.1, tmax=0.4, baseline=None, preload=True)\n```\n:::\n\n\n# What are eye artifacts?\nWhile it is often assumed that eye artifacts are the result of muscle activity, they are actually the result of a **ionic gradient** in the retinal pigment epithelium that makes the eye an **electric dipole** [^1]. Thus, moving the eyes and the dipole **induces** a change in voltage picked up by the sensors that is roughly proportional to the **amplitude** of the movement. Because this could overshadow the neural responses, many studies eliminate eye movements by making participants **fixate** a point during the experiment.\n\nHowever, another kind of eye artifact may still occur - **blinks**. Eye blinks affect the measured voltage because the eye lid **changes the resistance** between the positively charged cornea and the forehead. Fortunately, these eye artifacts are largely **independent** of each other and the brain activity which makes them ideal candidates for independent component analysis (ICA) [^2].\n\n# Identifying eye-blink components with ICA\nICA is an algorithm that finds a rotation matrix to separate the sensor data into components that are **mutually independent** [^3].\nIn the code below, I fit an ICA to the epoched data. At maximum, ICA can capture as many components as there are channels. However, usually the data can be captured with **fewer components**. When the `n_components` parameter is set to a decimal number, the ICA will compute as many components as are necessary to explain this share of the total variance in the data. Because highpass filtering improves the quality of artifact separation [^4], I use a highpass filtered copy of the data for ICA.\n\n::: {#4799fc42 .cell execution_count=2}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\nfrom mne.preprocessing import ICA\nfig, ax = plt.subplots(1, 5)\nica = ICA(n_components=0.99)\nica.fit(epochs.copy().filter(l_freq=2, h_freq=None))\nica.plot_components(range(5), axes=ax);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSetting up high-pass filter at 2 Hz\n\nFIR filter parameters\n---------------------\nDesigning a one-pass, zero-phase, non-causal highpass filter:\n- Windowed time-domain design (firwin) method\n- Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation\n- Lower passband edge: 2.00\n- Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 1.00 Hz)\n- Filter length: 249 samples (1.660 s)\n\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nFitting ICA to data using 59 channels (please be patient, this may take a while)\n    Applying projection operator with 1 vector (pre-whitener computation)\n    Applying projection operator with 1 vector (pre-whitener application)\nSelecting by explained variance: 32 components\n    Applying projection operator with 1 vector (pre-whitener application)\nFitting ICA took 1.5s.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![The first 5 inpedendent components found by ICA. These account for most of the variance in the data](index_files/figure-ipynb/cell-3-output-3.png){}\n:::\n:::\n\n\nThe components are ordered by **explained variance**, so the first few components have the largest impact on the signal.\nEach component is a **linear combination** of all channels and the weights indicate how much each channel affects that component [^5]. The first components depends almost solely on the **frontal channels** - a strong indicator that it represents eye-blink artifacts! \n\nAnother way to characterize the components is to obtain their **time course** by filtering the EEG signal using the component weights. The resulting time series is called the **component loading** and indicates the presence of that component in the data across time. In the code below, I compute the loading for all ICA components, select the first one and plot it after concatenating all epochs.\n\n::: {#14e7eff9 .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nsrc = ica.get_sources(epochs)\nsrc = src.get_data()[:, 0, :].flatten()\ntimes = np.linspace(0, len(src) / epochs.info[\"sfreq\"], len(src))\nplt.plot(times[:4000], src[:4000])\nplt.xlabel(\"Time [s]\")\nplt.ylabel(\"Component loading [a.u.]\");\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Applying projection operator with 1 vector (pre-whitener application)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Loading of the components which indicates how active this component is throughout the recording](index_files/figure-ipynb/cell-4-output-2.png){}\n:::\n:::\n\n\nThe component loading is mostly flat except for **large amplitude spikes** - exactly what is expected from a signal that represents discrete eye blinks. After ensuring that the component captures blinks it can be removed from the data.\n\n# Automated component rejection\nOne could simply select and remove the eye blink component from the data. However, manual selection of components goes against the idea of an automated preprocessing pipeline. Instead, we can use the selected component as a **template** and classify new components as blinks by using the `corrmap` algorithm which selects components who's **correlation** with the template exceeds some **threshold** [^6]. To do this we can can store the blink component's index in the `ICA.labels_` attribute and save the ICA as template.\n\n::: {#d023ba26 .cell execution_count=4}\n``` {.python .cell-code}\nimport tempfile\ntemp_dir = tempfile.TemporaryDirectory()\ntemplate = ica.copy()\ntemplate.labels_['blinks'] = [0]\ntemplate.save(temp_dir.name + '/template_ica.fif')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWriting ICA solution to /tmp/tmpdcllnogk/template_ica.fif...\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<table class=\"table mne-repr-table\">\n    <tr>\n        <th>Method</th>\n        <td>fastica</td>\n    </tr>\n    <tr>\n        <th>Fit parameters</th>\n        <td>algorithm=parallel<br />fun=logcosh<br />fun_args=None<br />max_iter=1000<br /></td>\n    </tr>\n    <tr>\n        <th>Fit</th>\n        <td>68 iterations on epochs (11020 samples)</td>\n    </tr>\n    \n    <tr>\n        <th>ICA components</th>\n        <td>32</td>\n    </tr>\n    <tr>\n        <th>Available PCA components</th>\n        <td>59</td>\n    </tr>\n    <tr>\n        <th>Channel types</th>\n        <td>eeg</td>\n    </tr>\n    <tr>\n        <th>ICA components marked for exclusion</th>\n        <td>&mdash;</td>\n    </tr>\n    \n</table>\n```\n:::\n:::\n\n\nNow we can iterate through all entries in the `.labels_` attribute and use `corrmap` to find components that are **similar** to the respective template. The first input for `corrmap` is the list of ICAs being processed. The second input is a tuple with the index of the ICA instance in the list and the component of that ICA being used as **template**. Similar components that are detected are stored in the `.labels_` attribute of the respective ICA instance.\n\n::: {#2ffed882 .cell execution_count=5}\n``` {.python .cell-code}\nfrom mne.preprocessing import read_ica, corrmap\ntemplate = read_ica(temp_dir.name + '/template_ica.fif')\n\nfor key, value in template.labels_.items():\n    corrmap([template, ica], (0, value[0]), label=key, threshold=0.85, plot=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading /tmp/tmpdcllnogk/template_ica.fif ...\n    Read a total of 1 projection items:\n        Average EEG reference (1 x 60) active\nNow restoring ICA solution ...\nReady.\nMedian correlation with constructed map: 1.000\nAt least 1 IC detected for each subject.\n```\n:::\n:::\n\n\nOf course, this example is completely circular because we applied `corrmap` to the same data we used for selecting the template in the first place. However, once selected, the same template can be applied to **multiple recorings** and even **across experiments**, given that the electrode layout is the same. After all artifact components have been identified, we can exclude them when **applying** the ICA to the sensor data.\n\n::: {#ec4b85ee .cell execution_count=6}\n``` {.python .cell-code}\nbad_components = [value[0] for value in ica.labels_.values()]\nepochs.load_data() # make sure data is loaded\nepochs = ica.apply(epochs, exclude=bad_components)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nApplying ICA to Epochs instance\n    Applying projection operator with 1 vector (pre-whitener application)\n    Transforming to ICA space (32 components)\n    Zeroing out 1 ICA component\n    Projecting back using 59 PCA components\n```\n:::\n:::\n\n\n# When data must be rejected\nEven with all the preprocessing steps discussed in this guide, some data can't be saved.\nSometimes, a channels **loses contact** with the scalp or a segment is noise-ridden, for example due to **excessive movement**. In those cases, we have to remove that data so it won't **contaminate** the average response. Traditionally, EEG data is **manually inspected**, bad channels are interpolated and bad segments are annotated for rejection by hand. This is suboptimal for several reasons: first, scanning tens of hours of EEG recordings is tedious, **time consuming** and unfeasible for very large data sets. What's more, the manual approach **reduces reproducibility** because the criteria for what counts as a bad channel or segment are subjective. Finally, it is often not necessary to interpolate a channel for the entire recording if it is bad for **only a fraction**.\n\n# Introducing autoreject\nAll of these problems are addressed by the `autoreject` algorithm [^7], which is a procedure to identify and either **repair or reject** bad data segments. For each channel p, it estimates a peak-to-peak **threshold** &tau;. Each channel marks epochs as bad that exceeds their respective threshold. A trial is rejected if a **fraction &kappa;** of all channels marks it as bad. If less than &kappa; channels are bad, up to **&rho; are interpolated** to repair the epoch. All parameters, &tau; &kappa; and &rho; are **estimated from the data** using cross-validation. Thus the optimal set of parameters are those that **minimize the difference** between testing and training data. In this sense, `autoreject` acts similar to a **human observer** identifying outliers in the data. After installing the module with `pip install autoreject`, we can simply apply it to the epoched data. I also plot the **rejection log** to visualize the effect of `autoreject` on the data.\n\n::: {#670411f3 .cell execution_count=7}\n``` {.python .cell-code}\nfrom autoreject import AutoReject\n\nfig, ax = plt.subplots()\nar = AutoReject(verbose=False)\nepochs, log = ar.fit_transform(epochs, return_log=True)\nlog.plot(orientation=\"horizontal\", ax=ax);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDropped 6 epochs: 32, 40, 88, 95, 96, 103\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Matrix displaying the results of `autoreject`. Each column is one trial, and blue squares indicate interpolated sensors. Red columns were deemed \"bad\" and marked for rejection.](index_files/figure-ipynb/cell-8-output-2.png){}\n:::\n:::\n\n\nIn the plot below, blue marks channels that have been **interpolated** within a given epoch. Red marks channels that have been deemed bad but not interpolated because the number of bad channels **exceeded &rho;**. The red column at epoch 40 indicates that this epoch has been **rejected** because the number of bad channels **exceeded &kappa;**.\n\n\n# Conclusion\nThe repertoire of preprocessing methods outlined in this and the previous post is sufficient to clean data for most EEG projects. Importantly, all steps can be assembled into a **fully automated** pipeline. In the next and final post in this series, I will share a such a pipeline and demonstrate a method for estimating the **effectiveness** of each step.\n\n# Footnotes\n[^1]: This is referred to as the corneo-retinal dipole. A explanation of the underlying physiology can be found in: *Arden, G. B., & Constable, P. A. (2006). The electro-oculogram. Progress in retinal and eye research, 25(2), 207-248.*\n\n[^2]: A detailed investigation of eye-artifacts and their detection via ICA can be found in: *Plöchl, M., Ossandón, J. P., & König, P. (2012). Combining EEG and eye tracking: identification, characterization, and correction of eye movement artifacts in electroencephalographic data. Frontiers in human neuroscience, 6, 278.*\n\n[^3]: An in-depth explanation of ICA is beyond the scope of this post but can be found in: *Makeig, S., Bell, A., Jung, T. P., & Sejnowski, T. J. (1995). Independent component analysis of electroencephalographic data. Advances in neural information processing systems, 8.*\n\n[^4]: A highpass between 1 and 2 Hz before ICA is optimal, see *Winkler, I., Debener, S., Müller, K. R., & Tangermann, M. (2015, August). On the influence of high-pass filtering on ICA-based artifact reduction in EEG-ERP. In 2015 37th Annual International Conference of the IEEE Engineering in Medicine and Biology Society (EMBC) (pp. 4101-4105). IEEE.*\n\n[^5]: The absolute sign of the component is meaningless and may change when ICA is performed repeatedly.\n\n[^6]: A detailed description of the corrmap algorithm can be found in *Viola, F. C., Thorne, J., Edmonds, B., Schneider, T., Eichele, T., & Debener, S. (2009). Semi-automatic identification of independent components representing EEG artifact. Clinical Neurophysiology, 120(5), 868-877.*\n\n[^7]: A detailed description of the autoreject algorithm can be found in *Jas, M., Engemann, D. A., Bekhti, Y., Raimondo, F., & Gramfort, A. (2017). Autoreject: Automated artifact rejection for MEG and EEG data. NeuroImage, 159, 417-429.*\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /home/olebi/projects/new_website/.pixi/envs/default/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.13.5\n  widgets: \n---\n",
    "supporting": [
      "index_files/figure-ipynb"
    ],
    "filters": []
  }
}